#!/bin/bash
##############################################################################
# gen-sf
# -----------
# Generates a Symfony project.
#
# Usage:
#       gen-sf
#
# :authors: Romain Bailly, @${PROJECT_DIR}
# :date: 16 January 2019
# :version: 0.0.1
##############################################################################

set -e
set -o pipefail

OWNER=${OWNER:-Romain Bailly}
PROJECT_NAME="$(basename "$(pwd)")"
PROJECT_DIR="$(basename "$(dirname "$(pwd)")")"
PROJECT_ABS_DIR="$(dirname "$(pwd)")"

if [[ "$PROJECT_DIR" == "barolab" ]]; then
	OWNER="Romain Bailly"
fi

# Run the composer command for creating the Symfony application.
initialization() {
	cd "$PROJECT_ABS_DIR" || return 1
	echo "Running \"composer create-project symfony/skeleton $PROJECT_NAME\" in $PROJECT_ABS_DIR"
	composer create-project symfony/skeleton "$PROJECT_NAME"
	cd "$PROJECT_ABS_DIR/$PROJECT_NAME" || return 1
	composer require --dev cs-fixer phpunit
	git init
}

# Generate the editor config dotfile
editorconfig() {
	echo "Writing .editorconfig"
	cat <<-EOF >".editorconfig"
		root = true

		[*]
		end_of_line = LF

		[*.php]
		indent_style = space
		indent_size = 4

		[*.yaml]
		indent_style = space
		indent_size = 2
	EOF
}

# Generate the LICENSE file.
license() {
	year=$(date +"%Y")
	echo "Writing LICENSE"
	cat <<-EOF >"LICENSE"
		The MIT License (MIT)

		Copyright (c) $year $OWNER

		Permission is hereby granted, free of charge, to any person obtaining a copy
		of this software and associated documentation files (the "Software"), to deal
		in the Software without restriction, including without limitation the rights
		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
		copies of the Software, and to permit persons to whom the Software is
		furnished to do so, subject to the following conditions:

		The above copyright notice and this permission notice shall be included in all
		copies or substantial portions of the Software.

		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
		SOFTWARE.
	EOF
}

# Generate the git hook scripts and add symbolic links to the project's .git/hooks
hooks() {
	mkdir -p scripts

	postcheckout="scripts/post-checkout"
	echo "Writing $postcheckout"
	cat <<-EOF >"$postcheckout"
		#!/bin/bash

		PREV_COMMIT=\$1
		POST_COMMIT=\$2

		if [[ '0000000000000000000000000000000000000000' == "\$PREV_COMMIT" ]]; then exit 0; fi

		normal=\$(tput sgr0)
		red=\$(tput setf 4)

		if [[ -f composer.json ]]; then
		    DIFF=\$(git diff --shortstat "\$PREV_COMMIT..\$POST_COMMIT" composer.json)
		    if [[ \$DIFF != "" ]]; then
		        echo -e "\${red} composer.json has changed. You must run composer install\${normal}"
		    fi
		fi

		if [[ -f composer.lock ]]; then
		    DIFF=\$(git diff --shortstat "\$PREV_COMMIT..\$POST_COMMIT" composer.lock)
		    if [[ \$DIFF != "" ]]; then
		        echo -e "\${red} composer.lock has changed. You must run composer install\${normal}"
		    fi
		fi
	EOF

	precommit="scripts/pre-commit"
	echo "Writing $precommit"
	cat <<-EOF >"$precommit"
		#!/bin/bash

		underline=\$(tput smul)
		bold=\$(tput bold)
		normal=\$(tput sgr0)
		green=\$(tput setf 2)
		red=\$(tput setf 4)
		status=0

		title() {
		    echo "\${underline}\${bold}Running \${1}:\${normal}"
		}

		message() {
		    echo "\${bold}Running \${1} globally\${normal}"
		}

		printResult() {
		    # shellcheck disable=SC2181
		    if [ \$? -ne 0 ]; then
		        echo
		        echo " \${red}❌\${normal} \$1"
		        status=1
		    else
		        echo " \${green}✔\${normal} \$1"
		    fi
		}

		exitIfError() {
		    if [ \$status -ne 0 ]; then
		        echo
		        echo "Hook \${bold}\${red}failed\${normal}, please check your code."
		        echo
		        exit 1
		    fi
		}

		NAME=\$(git branch | grep '\*' | sed 's/* //')
		if [ "\$NAME" != '(no branch)' ]; then
		    title "Format"
		    for file in \$(git diff --diff-filter=d --cached --name-only | grep -E '\.php\$'); do
		        vendor/bin/php-cs-fixer fix "\${file}" 1>/dev/null
		        printResult "\$file"
		        git add "\${file}"
		    done
		    echo
		    exitIfError

		    title "Lint"
		    for file in \$(git diff --diff-filter=d --cached --name-only | grep -E '\.php\$'); do
		        php -l "\${file}" 1>/dev/null
		        printResult "\$file"
		    done
		    echo
		    exitIfError

		    echo
		    echo "Hook \${bold}\${green}succeeded\${normal}, proceeding to commit."
		    echo
		fi
	EOF

	jq -rM '.scripts["post-install-cmd"] += ["cp -f ./scripts/post-checkout .git/hooks","cp -f ./scripts/pre-commit .git/hooks","chmod +x .git/hooks/post-checkout","chmod +x .git/hooks/pre-commit"]' composer.json >composer-tmp.json
	mv -f composer-tmp.json composer.json
}

# Create all the dockerfiles (Nginx, FPM), with configuration & docker-compose.yaml
dockerfiles() {
	mkdir -p deploy/php
	mkdir -p deploy/web
	php_dockerfile="deploy/app/Dockerfile"
	web_dockerfile="deploy/web/Dockerfile"
	web_entrypoint="deploy/web/boot"
	web_config="deploy/web/app.template"
	composefile="docker-compose.yaml"
	ignorefile=".dockerignore"

	echo "Writing $php_dockerfile"
	cat <<-EOF >"$php_dockerfile"
		FROM php:7.3-fpm-alpine
		LABEL MAINTAINER="Romain Bailly"
		WORKDIR /usr/src/app
		RUN apk --no-cache --update add curl zip zlib-dev libzip-dev \
		  && docker-php-ext-install zip pdo pdo_mysql \
		  && mkdir -p /usr/src/app/var/cache \
		  && chmod -R 750 /usr/src/app/var/cache \
		  && curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

		# INSTALL DEPENDENCIES
		COPY composer* /usr/src/app/
		RUN composer install \
		  --optimize-autoloader \
		  --no-dev \
		  --no-scripts \
		  --no-suggest \
		  --no-plugins \
		  --no-progress \
		  --no-interaction

		# CONFIGURE
		ENV APP_ENV=prod
		ENV APP_SECRET=98b4f5f4c953683f247b7c6c41babf5b

		# COPY SOURCE FILES
		COPY . /usr/src/app/
	EOF

	echo "Writing $web_dockerfile"
	cat <<-EOF >"$web_dockerfile"
		FROM nginx:1.15
		LABEL MAINTAINER="Romain Bailly"
		ENV PHP_APP_HOST=app
		ENV PHP_APP_PORT=9000

		COPY deploy/web/boot /
		COPY deploy/web/app.template /etc/nginx/conf.d/
		COPY public /usr/src/app/public

		RUN chmod +x /boot
		WORKDIR /usr/src/app/public
		ENTRYPOINT /boot
	EOF

	echo "Writing $web_entrypoint"
	cat <<-EOF >"$web_entrypoint"
		#!/bin/bash

		# shellcheck disable=SC2016
		envsubst '$$PHP_APP_HOST$$PHP_APP_PORT' < /etc/nginx/conf.d/app.template > /etc/nginx/conf.d/default.conf
		cat /etc/nginx/conf.d/default.conf
		exec nginx -g 'daemon off;'
	EOF

	echo "Writing $web_config"
	cat <<-EOF >"$web_config"
		server {
		    server_name _;
		    root /usr/src/app/public;

		    location / {
		        try_files \$uri /index.php\$is_args\$args;
		    }

		    location ~ ^/index\.php(/|\$) {
		        fastcgi_pass \${PHP_APP_HOST}:\${PHP_APP_PORT};
		        fastcgi_split_path_info ^(.+\.php)(/.*)\$;
		        include fastcgi_params;

		        fastcgi_param SCRIPT_FILENAME \$realpath_root\$fastcgi_script_name;
		        fastcgi_param DOCUMENT_ROOT \$realpath_root;

		        internal;
		    }

		    location ~ \.php\$ {
		        return 404;
		    }

		    access_log /dev/stdout;
		    error_log /dev/stderr debug;
		}
	EOF

	echo "Writing $composefile"
	cat <<-EOF >"$composefile"
		version: "3.7"
		volumes:
		  mysql: {}

		networks:
		  db: {}
		  web: {}

		services:
		  web:
		    build:
		      context: .
		      dockerfile: deploy/web/Dockerfile
		    networks:
		      - web
		    ports:
		      - 8000:80
		    depends_on:
		      - app
		    volumes: # Used for live reloading
		      - ./public:/usr/src/app/public

		  app:
		    build:
		      context: .
		      dockerfile: deploy/app/Dockerfile
		    depends_on:
		      - db
		    networks:
		      - web
		      - db
		    env_file:
		      - .env
		    volumes: # Used for live reloading
		      - ./bin:/usr/src/app/bin
		      - ./src:/usr/src/app/src
		      - ./var:/usr/src/app/var
		      - ./config:/usr/src/app/config
		      - ./vendor:/usr/src/app/vendor
		  db:
		    image: mysql:5.7
		    networks:
		      - db
		    volumes:
		      - mysql:/var/lib/mysql
		    environment:
		      MYSQL_ROOT_PASSWORD: root
		      MYSQL_DATABASE: symfony
		      MYSQL_USER: symfony
		      MYSQL_PASSWORD: symfony
	EOF

	echo "Writing $ignorefile"
	cat <<-EOF >"$ignorefile"
		scripts
		tests
		var
		vendor
	EOF
}

documentation() {
	changelogfile="CHANGELOG.md"
	echo "Writing $changelogfile"
	cat <<-EOF >"$changelogfile"
		# Changelog

		All notable changes to this project will be documented in this file.

		The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
		and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

		## Unrelease

		- This CHANGELOG file to hopefully serve as an evolving example of a standardized open source project CHANGELOG.
		- The project's template
	EOF

	readmefile="README.md"
	echo "Writing $readmefile"
	cat <<-EOF >"$readmefile"
		# $PROJECT_NAME

		[![Travis CI](https://img.shields.io/travis/${PROJECT_DIR}/${PROJECT_NAME}.svg?style=for-the-badge)](https://travis-ci.org/${PROJECT_DIR}/${PROJECT_NAME})

		{DESCRIPTION}

		        **Table of Contents**

		<!-- toc -->

		<!-- tocstop -->

		## Getting started

		You can get the project starting using \`docker-compose up -d\`. Then go to [http://127.0.0.1:8000](http://127.0.0.1:8000) to see the symfony startup page. You can now add more dependencies & code your business.

		## Contributing

		1. Fork it
		1. Create your feature branch (\`git checkout -b my-new-feature\`)
		1. Update the changelog file
		1. Run the tests
		1. Commit your changes (\`git commit -am 'Add some feature'\`)
		1. Push to the branch (\`git push origin my-new-feature\`)
		1. Create new Pull Request

		## License

		See [the license file](/LICENSE)
	EOF
}

main() {
	echo "Generating project files for ${PROJECT_NAME}..."

	initialization
	documentation
	editorconfig
	dockerfiles
	license
	hooks

	echo "Giving you ownership..."
	sudo chown -R "$(whoami)" "$PROJECT_ABS_DIR/$PROJECT_NAME"
	sudo chmod -R +x "$PROJECT_ABS_DIR/$PROJECT_NAME/scripts"

	echo "Ensure dependencies..."
	composer install
}

main
